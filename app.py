from flask import Flask, render_template, request, redirect, url_for, flash, jsonify, send_from_directory, send_from_directory
from flask_login import LoginManager, login_user, login_required, logout_user, current_user
from flask_mail import Mail, Message
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime, timedelta
import os
import pytz
import gc
import weakref
from functools import lru_cache

# Models import
from models import db, User, Task, Comment, Reminder, Report, ReportComment, task_assignments, report_shares, report_reads

# Mail konfig√ºrasyonu i√ßin kalƒ±cƒ± saklama
from mail_config import save_mail_config, load_mail_config, apply_mail_config_to_app

# Timezone ayarlarƒ± import
from timezone_config import (
    load_timezone_config, save_timezone_config, get_popular_timezones, 
    get_all_timezones, validate_timezone, get_current_timezone
)

# ƒ∞stanbul timezone - dinamik olarak y√ºklenecek
def get_current_timezone_obj():
    """Mevcut timezone objesini d√∂nd√ºr√ºr"""
    config = load_timezone_config()
    return pytz.timezone(config['timezone'])

# Jinja2 filtre fonksiyonlarƒ±
def nl2br(value):
    """Yeni satƒ±rlarƒ± <br> etiketlerine √ßevirir"""
    return value.replace('\n', '<br>')

def moment_utcnow():
    """≈ûu anki UTC zamanƒ±nƒ± d√∂nd√ºr√ºr"""
    return datetime.utcnow()

def get_istanbul_time():
    """Mevcut timezone'da saati d√∂nd√ºr√ºr"""
    current_tz = get_current_timezone_obj()
    return datetime.now(current_tz)

def utc_to_istanbul(utc_dt):
    """UTC zamanƒ±nƒ± mevcut timezone'a √ßevirir"""
    if utc_dt is None:
        return None
    current_tz = get_current_timezone_obj()
    if utc_dt.tzinfo is None:
        utc_dt = pytz.utc.localize(utc_dt)
    return utc_dt.astimezone(current_tz)

def istanbul_to_utc(istanbul_dt):
    """Mevcut timezone'ƒ± UTC'ye √ßevirir"""
    if istanbul_dt is None:
        return None
    if isinstance(istanbul_dt, str):
        istanbul_dt = datetime.strptime(istanbul_dt, '%Y-%m-%d %H:%M:%S')
    current_tz = get_current_timezone_obj()
    if istanbul_dt.tzinfo is None:
        istanbul_dt = current_tz.localize(istanbul_dt)
    return istanbul_dt.astimezone(pytz.utc).replace(tzinfo=None)

app = Flask(__name__)
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'your-secret-key-here-change-in-production')

# Database configuration - PostgreSQL for production, SQLite for development
database_url = os.environ.get('DATABASE_URL')
if database_url:
    # DigitalOcean PostgreSQL URL d√ºzeltmesi
    if database_url.startswith('postgres://'):
        database_url = database_url.replace('postgres://', 'postgresql://', 1)
    
    app.config['SQLALCHEMY_DATABASE_URI'] = database_url
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    
    # Production PostgreSQL ayarlarƒ± - RAM optimizasyonu
    if os.environ.get('FLASK_ENV') == 'production':
        app.config['SQLALCHEMY_ENGINE_OPTIONS'] = {
            'pool_pre_ping': True,
            'pool_recycle': 180,  # 3 dakika (300'den 180'e d√º≈üt√º)
            'pool_timeout': 10,   # 20'den 10'a d√º≈üt√º
            'max_overflow': 0,    # Overflow yok
            'pool_size': 3,       # Maximum 3 connection (default 5'ten d√º≈üt√º)
        }
else:
    # SQLite fallback (development veya PostgreSQL hen√ºz hazƒ±r deƒüilse)
    app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///todo_company.db'
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Mail configuration
app.config['MAIL_SERVER'] = os.environ.get('MAIL_SERVER', 'smtp.gmail.com')
app.config['MAIL_PORT'] = int(os.environ.get('MAIL_PORT', '587'))
app.config['MAIL_USE_TLS'] = os.environ.get('MAIL_USE_TLS', 'true').lower() in ['true', 'on', '1']
app.config['MAIL_USERNAME'] = os.environ.get('MAIL_USERNAME') or 'info@helmex.com.tr'  # Fallback
app.config['MAIL_PASSWORD'] = os.environ.get('MAIL_PASSWORD') or '4866Pars'  # Ge√ßici - app password ile deƒüi≈ütir
app.config['MAIL_DEFAULT_SENDER'] = os.environ.get('MAIL_DEFAULT_SENDER', 'noreply@helmex.com')

# Debug: Mail config'i log'la
print(f"üîß Mail config - Username: {app.config['MAIL_USERNAME'][:4]}***")
print(f"üîß Mail config - Password: {'SET' if app.config['MAIL_PASSWORD'] else 'NOT SET'}")

# Kaydedilmi≈ü mail ayarlarƒ±nƒ± y√ºkle
saved_mail_config = load_mail_config()
apply_mail_config_to_app(app, saved_mail_config)

# Flask-Mail ba≈ülatma
# Initialize extensions with app
db.init_app(app)
mail = Mail(app)
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

# Remember cookie ayarlarƒ± (30 g√ºn)
from datetime import timedelta
app.config['REMEMBER_COOKIE_DURATION'] = timedelta(days=30)
app.config['REMEMBER_COOKIE_SECURE'] = False  # Development i√ßin False, production'da True
app.config['REMEMBER_COOKIE_HTTPONLY'] = True

# Timezone-aware date formatting functions
def format_date_time(dt):
    """DateTime'ƒ± timezone'a g√∂re full format'ta d√∂nd√ºr√ºr"""
    if dt is None:
        return '-'
    config = load_timezone_config()
    converted_dt = utc_to_istanbul(dt)
    return converted_dt.strftime(config['display_format'])

def format_date_only(dt):
    """DateTime'ƒ± timezone'a g√∂re sadece tarih format'ta d√∂nd√ºr√ºr"""
    if dt is None:
        return '-'
    config = load_timezone_config()
    converted_dt = utc_to_istanbul(dt)
    return converted_dt.strftime(config['date_format'])

def format_time_only(dt):
    """DateTime'ƒ± timezone'a g√∂re sadece saat format'ta d√∂nd√ºr√ºr"""
    if dt is None:
        return '-'
    config = load_timezone_config()
    converted_dt = utc_to_istanbul(dt)
    return converted_dt.strftime(config['time_format'])

# Jinja2 filtrelerini kaydet
app.jinja_env.filters['nl2br'] = nl2br
app.jinja_env.filters['istanbul_time'] = utc_to_istanbul
app.jinja_env.filters['format_datetime'] = format_date_time
app.jinja_env.filters['format_date'] = format_date_only
app.jinja_env.filters['format_time'] = format_time_only

# Memory management ve cleanup handlers
@app.after_request
def after_request_cleanup(response):
    """Her request sonrasƒ± memory cleanup"""
    try:
        # Database session'larƒ± temizle
        db.session.remove()
        
        # Garbage collection'ƒ± tetikle (her 10 request'te bir)
        if hasattr(after_request_cleanup, 'counter'):
            after_request_cleanup.counter += 1
        else:
            after_request_cleanup.counter = 1
            
        if after_request_cleanup.counter % 10 == 0:
            gc.collect()
            after_request_cleanup.counter = 0
            
    except Exception as e:
        print(f"‚ö†Ô∏è Cleanup error: {e}")
    
    return response

@app.teardown_appcontext
def shutdown_session(exception=None):
    """Application context bitiminde session cleanup"""
    try:
        db.session.remove()
    except Exception as e:
        print(f"‚ö†Ô∏è Session cleanup error: {e}")

# Cache for frequently accessed data
@lru_cache(maxsize=32)
def get_user_by_id_cached(user_id):
    """User'ƒ± cache ile getir"""
    return User.query.get(user_id)

@lru_cache(maxsize=16)  
def get_department_users_cached(department):
    """Department user'larƒ±nƒ± cache ile getir"""
    return User.query.filter_by(department=department).all()
app.jinja_env.globals['get_istanbul_time'] = get_istanbul_time
app.jinja_env.globals['get_timezone_config'] = load_timezone_config
app.jinja_env.globals['moment'] = type('obj', (object,), {
    'utcnow': moment_utcnow,
    'istanbul_now': get_istanbul_time
})

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# Ana sayfa
@app.route('/')
@login_required
def index():
    # Memory optimization: Limit queries to reduce RAM usage
    TASK_LIMIT = 50  # Her kategori i√ßin maksimum 50 g√∂rev
    
    if current_user.role == 'admin':
        # Admin t√ºm g√∂revleri g√∂rebilir - limit ile
        tasks = Task.query.filter(Task.status != 'completed').order_by(Task.created_at.desc()).limit(TASK_LIMIT).all()
        completed_tasks = Task.query.filter_by(status='completed').order_by(Task.updated_at.desc()).limit(TASK_LIMIT).all()
        assigned_tasks = current_user.assigned_tasks.filter(Task.status != 'completed').order_by(Task.created_at.desc()).limit(TASK_LIMIT).all()
        assigned_completed_tasks = current_user.assigned_tasks.filter_by(status='completed').order_by(Task.updated_at.desc()).limit(TASK_LIMIT).all()
        created_tasks = Task.query.filter(Task.created_by == current_user.id, Task.status != 'completed').order_by(Task.created_at.desc()).limit(TASK_LIMIT).all()
        created_completed_tasks = Task.query.filter(Task.created_by == current_user.id, Task.status == 'completed').order_by(Task.updated_at.desc()).limit(TASK_LIMIT).all()
    elif current_user.role == 'manager':
        # Manager kendi departmanƒ±ndaki g√∂revleri g√∂rebilir - limit ile - cache kullanƒ±larak optimize edildi
        dept_users = get_department_users_cached(current_user.department)
        user_ids = [user.id for user in dept_users]
        # Departmandaki kullanƒ±cƒ±lara atanan aktif g√∂revleri bul
        tasks = Task.query.join(task_assignments).join(User).filter(User.id.in_(user_ids), Task.status != 'completed').order_by(Task.created_at.desc()).limit(TASK_LIMIT).all()
        # Departmandaki tamamlanan g√∂revler
        completed_tasks = Task.query.join(task_assignments).join(User).filter(User.id.in_(user_ids), Task.status == 'completed').order_by(Task.updated_at.desc()).limit(TASK_LIMIT).all()
        # Manager'ƒ±n atadƒ±ƒüƒ± aktif g√∂revler
        created_tasks = Task.query.filter(Task.created_by == current_user.id, Task.status != 'completed').order_by(Task.created_at.desc()).limit(TASK_LIMIT).all()
        created_completed_tasks = Task.query.filter(Task.created_by == current_user.id, Task.status == 'completed').order_by(Task.updated_at.desc()).limit(TASK_LIMIT).all()
        # Manager'a atanan aktif g√∂revler
        assigned_tasks = current_user.assigned_tasks.filter(Task.status != 'completed').order_by(Task.created_at.desc()).limit(TASK_LIMIT).all()
        assigned_completed_tasks = current_user.assigned_tasks.filter_by(status='completed').order_by(Task.updated_at.desc()).limit(TASK_LIMIT).all()
    else:
        # Employee sadece kendine atanan g√∂revleri g√∂rebilir - limit ile
        assigned_tasks = current_user.assigned_tasks.filter(Task.status != 'completed').order_by(Task.created_at.desc()).limit(TASK_LIMIT).all()
        assigned_completed_tasks = current_user.assigned_tasks.filter_by(status='completed').order_by(Task.updated_at.desc()).limit(TASK_LIMIT).all()
        # Employee'nin olu≈üturduƒüu g√∂revler (eƒüer varsa)
        created_tasks = Task.query.filter(Task.created_by == current_user.id, Task.status != 'completed').order_by(Task.created_at.desc()).limit(TASK_LIMIT).all()
        created_completed_tasks = Task.query.filter(Task.created_by == current_user.id, Task.status == 'completed').order_by(Task.updated_at.desc()).limit(TASK_LIMIT).all()
        tasks = assigned_tasks
        completed_tasks = assigned_completed_tasks
    
    return render_template('index.html', 
                         tasks=tasks, 
                         assigned_tasks=assigned_tasks, 
                         created_tasks=created_tasks,
                         completed_tasks=completed_tasks,
                         assigned_completed_tasks=assigned_completed_tasks if current_user.role != 'employee' else [],
                         created_completed_tasks=created_completed_tasks if current_user.role != 'employee' else [])

# PWA Routes
@app.route('/manifest.json')
def manifest():
    """PWA Manifest dosyasƒ±nƒ± serve et"""
    return send_from_directory('static', 'manifest.json', mimetype='application/manifest+json')

@app.route('/sw.js')
def service_worker():
    """Service Worker dosyasƒ±nƒ± serve et"""
    return send_from_directory('static', 'sw.js', mimetype='application/javascript')

@app.route('/api/current-time')
def current_time():
    """Mevcut timezone'da saati JSON olarak d√∂nd√ºr"""
    try:
        current_time = get_istanbul_time()
        config = load_timezone_config()
        formatted_time = current_time.strftime(config['display_format'])
        return jsonify({
            'time': formatted_time,
            'timezone': config['timezone'],
            'timestamp': current_time.timestamp()
        })
    except Exception as e:
        print(f"Time API error: {e}")
        return jsonify({'error': 'Time unavailable'}), 500

@app.route('/offline')
def offline():
    """√áevrimdƒ±≈üƒ± sayfasƒ±"""
    return render_template('offline.html')

@app.route('/api/app-info')
def app_info():
    """PWA uygulama bilgilerini d√∂nd√ºr"""
    return jsonify({
        'name': 'Helmex G√∂rev Y√∂netimi',
        'version': '1.0.0',
        'description': '≈ûirket i√ßi g√∂rev y√∂netim sistemi',
        'features': [
            'G√∂rev olu≈üturma ve takip',
            'Hatƒ±rlatmalar',
            'Rapor payla≈üƒ±mƒ±',
            '√áevrimdƒ±≈üƒ± √ßalƒ±≈üma',
            'Mobil uyumlu tasarƒ±m'
        ]
    })

# Giri≈ü sayfasƒ±
@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        remember = 'remember' in request.form  # "Beni hatƒ±rla" checkbox kontrol√º
        
        print(f"üîç Login attempt - Username: {username}")
        print(f"üîê Remember me: {remember}")
        
        user = User.query.filter_by(username=username).first()
        
        if user:
            print(f"‚úÖ User found: {user.username} | Role: {user.role}")
            print(f"üîê Password check...")
            
            if check_password_hash(user.password_hash, password):
                print(f"‚úÖ Password correct for user: {username}")
                login_user(user, remember=remember)
                print(f"‚úÖ User logged in successfully: {username} | Remember: {remember}")
                return redirect(url_for('index'))
            else:
                print(f"‚ùå Password incorrect for user: {username}")
                flash('Ge√ßersiz kullanƒ±cƒ± adƒ± veya ≈üifre!')
        else:
            print(f"‚ùå User not found: {username}")
            flash('Ge√ßersiz kullanƒ±cƒ± adƒ± veya ≈üifre!')
    
    return render_template('login.html')

# √áƒ±kƒ±≈ü
@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

# Gizlilik Politikasƒ±
@app.route('/privacy')
def privacy():
    """Gizlilik politikasƒ± sayfasƒ±"""
    return render_template('privacy.html')

# ƒ∞leti≈üim
@app.route('/contact')
def contact():
    """ƒ∞leti≈üim sayfasƒ±"""
    return render_template('contact.html')

# Kayƒ±t Ol
@app.route('/register', methods=['GET', 'POST'])
def register():
    """Kullanƒ±cƒ± kayƒ±t sayfasƒ±"""
    if request.method == 'POST':
        username = request.form['username'].strip()
        email = request.form['email'].strip()
        password = request.form['password']
        password_confirm = request.form['password_confirm']
        department = request.form['department'].strip()
        
        # Validation
        if not username or not email or not password or not department:
            flash('T√ºm alanlar zorunludur!')
            return render_template('register.html')
        
        if password != password_confirm:
            flash('≈ûifreler e≈üle≈ümiyor!')
            return render_template('register.html')
        
        if len(password) < 6:
            flash('≈ûifre en az 6 karakter olmalƒ±dƒ±r!')
            return render_template('register.html')
        
        # Kullanƒ±cƒ± var mƒ± kontrol et
        if User.query.filter_by(username=username).first():
            flash('Bu kullanƒ±cƒ± adƒ± zaten kullanƒ±lƒ±yor!')
            return render_template('register.html')
        
        if User.query.filter_by(email=email).first():
            flash('Bu e-posta adresi zaten kullanƒ±lƒ±yor!')
            return render_template('register.html')
        
        try:
            # Yeni kullanƒ±cƒ± olu≈ütur (varsayƒ±lan olarak employee)
            new_user = User(
                username=username,
                email=email,
                password_hash=generate_password_hash(password),
                role='employee',
                department=department,
                created_at=datetime.utcnow()
            )
            db.session.add(new_user)
            db.session.commit()
            
            flash('Hesabƒ±nƒ±z ba≈üarƒ±yla olu≈üturuldu! Giri≈ü yapabilirsiniz.')
            return redirect(url_for('login'))
            
        except Exception as e:
            db.session.rollback()
            flash(f'Hesap olu≈üturulurken hata olu≈ütu: {str(e)}')
            return render_template('register.html')
    
    return render_template('register.html')

# Hesap Silme
@app.route('/delete_account', methods=['POST'])
@login_required
def delete_account():
    """Kullanƒ±cƒ±nƒ±n kendi hesabƒ±nƒ± silmesi"""
    try:
        user_id = current_user.id
        username = current_user.username
        
        # Admin hesabƒ± silinemez
        if current_user.role == 'admin':
            flash('Admin hesabƒ± silinemez!')
            return redirect(url_for('index'))
        
        # Kullanƒ±cƒ±nƒ±n g√∂revlerini kontrol et
        user_tasks = Task.query.filter(
            (Task.created_by == user_id) | 
            (Task.assignees.any(id=user_id))
        ).all()
        
        if user_tasks:
            flash('Hesabƒ±nƒ±zƒ± silmeden √∂nce t√ºm g√∂revlerinizi tamamlamanƒ±z veya ba≈üka birine devretmeniz gerekiyor!')
            return redirect(url_for('index'))
        
        # Kullanƒ±cƒ±yƒ± sil
        db.session.delete(current_user)
        db.session.commit()
        
        # Oturumu kapat
        logout_user()
        
        flash(f'{username} hesabƒ± ba≈üarƒ±yla silindi!')
        return redirect(url_for('login'))
        
    except Exception as e:
        db.session.rollback()
        flash(f'Hesap silinirken hata olu≈ütu: {str(e)}')
        return redirect(url_for('index'))

# Yeni g√∂rev olu≈üturma
@app.route('/create_task', methods=['GET', 'POST'])
@login_required
def create_task():
    if current_user.role == 'employee':
        flash('G√∂rev olu≈üturma yetkiniz yok!')
        return redirect(url_for('index'))
    
    if request.method == 'POST':
        title = request.form['title']
        description = request.form['description']
        assigned_to_list = request.form.getlist('assigned_to')  # √áoklu se√ßim i√ßin getlist kullan
        priority = request.form['priority']
        due_date_str = request.form['due_date']
        
        if not assigned_to_list:
            flash('En az bir ki≈üi se√ßmelisiniz!')
            # Kullanƒ±cƒ± listesini yeniden y√ºkle
            if current_user.role == 'admin':
                users = User.query.all()
            else:  # manager
                dept_users = User.query.filter_by(department=current_user.department).all()
                other_managers = User.query.filter_by(role='manager').all()
                user_ids = set()
                users = []
                for user in dept_users + other_managers:
                    if user.id not in user_ids:
                        users.append(user)
                        user_ids.add(user.id)
            return render_template('create_task.html', users=users)
        
        due_date = None
        if due_date_str:
            try:
                # Kullanƒ±cƒ±dan gelen tarih ƒ∞stanbul saati olarak kabul edilir
                istanbul_dt = datetime.strptime(due_date_str, '%Y-%m-%d')
                print(f"üïê Due date input: {due_date_str} -> {istanbul_dt}")
                
                # ƒ∞stanbul saatini UTC'ye √ßevir
                due_date = istanbul_to_utc(istanbul_dt)
                print(f"üïê Due date UTC: {due_date}")
                
            except Exception as e:
                print(f"‚ùå Date conversion error: {e}")
                flash(f'Tarih formatƒ± hatasƒ±: {str(e)}')
                return redirect(url_for('create_task'))
        
        # Yeni g√∂rev olu≈ütur
        try:
            task = Task(
                title=title,
                description=description,
                created_by=current_user.id,
                priority=priority,
                due_date=due_date
            )
            
            # Atanacak kullanƒ±cƒ±larƒ± ekle
            assignees = User.query.filter(User.id.in_(assigned_to_list)).all()
            for assignee in assignees:
                task.assignees.append(assignee)
            
            db.session.add(task)
            db.session.commit()
            
            print(f"‚úÖ Task created successfully: {task.title}")
            
            # Acil g√∂revler i√ßin mail g√∂nder
            if priority == 'urgent':
                try:
                    send_urgent_task_email(task, assignees)
                    flash(f'üö® Acil g√∂rev olu≈üturuldu ve {len(assigned_to_list)} ki≈üiye mail g√∂nderildi!')
                except Exception as mail_error:
                    print(f"‚ö†Ô∏è Mail sending error: {mail_error}")
                    flash(f'‚ö†Ô∏è G√∂rev olu≈üturuldu ama mail g√∂nderilemedi. {len(assigned_to_list)} ki≈üiye atandƒ±.')
            else:
                if len(assigned_to_list) == 1:
                    flash('G√∂rev ba≈üarƒ±yla olu≈üturuldu!')
                else:
                    flash(f'G√∂rev ba≈üarƒ±yla olu≈üturuldu ve {len(assigned_to_list)} ki≈üiye atandƒ±!')
            
            return redirect(url_for('index'))
            
        except Exception as e:
            print(f"‚ùå Task creation error: {e}")
            db.session.rollback()
            flash(f'G√∂rev olu≈üturma hatasƒ±: {str(e)}')
            return redirect(url_for('create_task'))
    
    # Kullanƒ±cƒ± listesi - Manager'lar diƒüer manager ve √ßalƒ±≈üanlara atayabilir
    if current_user.role == 'admin':
        users = User.query.all()
    else:  # manager
        # Manager kendi departmanƒ±ndaki herkesi + diƒüer manager'larƒ± g√∂rebilir
        dept_users = User.query.filter_by(department=current_user.department).all()
        other_managers = User.query.filter_by(role='manager').all()
        # √áakƒ±≈ümalarƒ± √∂nlemek i√ßin set kullan
        user_ids = set()
        users = []
        for user in dept_users + other_managers:
            if user.id not in user_ids:
                users.append(user)
                user_ids.add(user.id)
    
    return render_template('create_task.html', users=users)

# G√∂rev detayƒ±
@app.route('/task/<int:task_id>')
@login_required
def task_detail(task_id):
    task = Task.query.get_or_404(task_id)
    
    # Yetki kontrol√º - g√∂rev atanmƒ±≈ülardan birisi mi kontrol et
    if current_user.role == 'employee' and current_user not in task.assignees:
        flash('Bu g√∂revi g√∂rme yetkiniz yok!')
        return redirect(url_for('index'))
    
    # G√∂revi okundu olarak i≈üaretle
    task.mark_as_read(current_user)
    
    comments = Comment.query.filter_by(task_id=task_id).order_by(Comment.created_at.desc()).all()
    return render_template('task_detail.html', task=task, comments=comments)

# G√∂rev durumu g√ºncelleme
@app.route('/update_task_status/<int:task_id>', methods=['POST'])
@login_required
def update_task_status(task_id):
    task = Task.query.get_or_404(task_id)
    new_status = request.form['status']
    
    # Yetki kontrol√º - g√∂rev atanmƒ±≈ülardan birisi mi kontrol et
    if current_user.role == 'employee' and current_user not in task.assignees:
        return jsonify({'error': 'Yetkiniz yok!'}), 403
    
    task.status = new_status
    task.updated_at = datetime.utcnow()
    
    if new_status == 'completed':
        task.completed_at = datetime.utcnow()
    
    db.session.commit()
    flash('G√∂rev durumu g√ºncellendi!')
    return redirect(url_for('task_detail', task_id=task_id))

# Yorum ekleme
@app.route('/add_comment/<int:task_id>', methods=['POST'])
@login_required
def add_comment(task_id):
    task = Task.query.get_or_404(task_id)
    content = request.form['content']
    
    comment = Comment(
        content=content,
        task_id=task_id,
        user_id=current_user.id
    )
    
    db.session.add(comment)
    db.session.commit()
    flash('Yorum eklendi!')
    return redirect(url_for('task_detail', task_id=task_id))

# Kullanƒ±cƒ± y√∂netimi (sadece admin)
@app.route('/users')
@login_required
def users():
    if current_user.role != 'admin':
        flash('Bu sayfaya eri≈üim yetkiniz yok!')
        return redirect(url_for('index'))
    
    users = User.query.all()
    
    # Her kullanƒ±cƒ± i√ßin istatistikleri hesapla
    for user in users:
        user.task_stats = {
            'assigned': user.assigned_tasks.count(),
            'created': user.created_tasks.count(),
            'completed': user.assigned_tasks.filter_by(status='completed').count(),
            'pending': user.assigned_tasks.filter_by(status='pending').count(),
            'in_progress': user.assigned_tasks.filter_by(status='in_progress').count(),
            'reminders': len(user.reminders),
            'comments': len(user.comments)
        }
    
    return render_template('users.html', users=users)

# Yeni kullanƒ±cƒ± ekleme
@app.route('/add_user', methods=['GET', 'POST'])
@login_required
def add_user():
    if current_user.role != 'admin':
        flash('Kullanƒ±cƒ± ekleme yetkiniz yok!')
        return redirect(url_for('index'))
    
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']
        role = request.form['role']
        department = request.form['department']
        
        # Kullanƒ±cƒ± zaten var mƒ± kontrol et
        if User.query.filter_by(username=username).first():
            flash('Bu kullanƒ±cƒ± adƒ± zaten kullanƒ±lƒ±yor!')
            return render_template('add_user.html')
        
        if User.query.filter_by(email=email).first():
            flash('Bu e-posta adresi zaten kullanƒ±lƒ±yor!')
            return render_template('add_user.html')
        
        user = User(
            username=username,
            email=email,
            password_hash=generate_password_hash(password),
            role=role,
            department=department
        )
        
        db.session.add(user)
        db.session.commit()
        flash('Kullanƒ±cƒ± ba≈üarƒ±yla eklendi!')
        return redirect(url_for('users'))
    
    return render_template('add_user.html')

# Kullanƒ±cƒ± silme
@app.route('/delete_user/<int:user_id>', methods=['POST'])
@login_required
def delete_user(user_id):
    if current_user.role != 'admin':
        flash('Kullanƒ±cƒ± silme yetkiniz yok!')
        return redirect(url_for('users'))
    
    user = User.query.get_or_404(user_id)
    
    # Kendini silmeye √ßalƒ±≈üƒ±yor mu?
    if user.id == current_user.id:
        flash('Kendi hesabƒ±nƒ±zƒ± silemezsiniz!')
        return redirect(url_for('users'))
    
    # Kullanƒ±cƒ±nƒ±n g√∂revlerini kontrol et
    assigned_tasks_count = user.assigned_tasks.count()
    created_tasks = Task.query.filter_by(created_by=user.id).count()
    user_reminders = Reminder.query.filter_by(user_id=user.id).count()
    user_comments = Comment.query.filter_by(user_id=user.id).count()
    
    try:
        # ƒ∞li≈ükili verileri temizle
        if assigned_tasks_count > 0:
            # Kullanƒ±cƒ±nƒ±n atanmƒ±≈ü olduƒüu g√∂revlerden √ßƒ±kar
            for task in user.assigned_tasks:
                task.assignees.remove(user)
                # Eƒüer g√∂revde ba≈üka atanmƒ±≈ü ki≈üi yoksa, admin'i ata
                if not task.assignees:
                    task.assignees.append(current_user)
        
        if created_tasks > 0:
            # Olu≈üturduƒüu g√∂revleri admin'e aktar
            Task.query.filter_by(created_by=user.id).update({'created_by': current_user.id})
        
        # Anƒ±msatƒ±cƒ±larƒ± sil
        if user_reminders > 0:
            Reminder.query.filter_by(user_id=user.id).delete()
        
        # Yorumlarƒ± admin'e aktar
        if user_comments > 0:
            Comment.query.filter_by(user_id=user.id).update({'user_id': current_user.id})
        
        # Kullanƒ±cƒ±yƒ± sil
        db.session.delete(user)
        db.session.commit()
        
        flash(f'Kullanƒ±cƒ± "{user.username}" ba≈üarƒ±yla silindi! ƒ∞li≈ükili veriler size aktarƒ±ldƒ±.')
        
    except Exception as e:
        db.session.rollback()
        flash(f'Kullanƒ±cƒ± silinirken hata olu≈ütu: {str(e)}')
    
    return redirect(url_for('users'))

# Kullanƒ±cƒ± d√ºzenleme
@app.route('/edit_user/<int:user_id>', methods=['GET', 'POST'])
@login_required
def edit_user(user_id):
    if current_user.role != 'admin':
        flash('Kullanƒ±cƒ± d√ºzenleme yetkiniz yok!')
        return redirect(url_for('users'))
    
    user = User.query.get_or_404(user_id)
    
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        role = request.form['role']
        department = request.form['department']
        new_password = request.form.get('new_password', '').strip()
        
        # Kullanƒ±cƒ± adƒ± ve e-posta kontrol√º (kendi dƒ±≈üƒ±nda)
        if User.query.filter(User.username == username, User.id != user.id).first():
            flash('Bu kullanƒ±cƒ± adƒ± ba≈üka bir kullanƒ±cƒ± tarafƒ±ndan kullanƒ±lƒ±yor!')
            # ƒ∞statistikleri hesapla
            user.task_stats = {
                'assigned': user.assigned_tasks.count(),
                'created': user.created_tasks.count(),
                'completed': user.assigned_tasks.filter_by(status='completed').count(),
                'pending': user.assigned_tasks.filter_by(status='pending').count(),
                'in_progress': user.assigned_tasks.filter_by(status='in_progress').count(),
                'reminders': len(user.reminders),
                'comments': len(user.comments)
            }
            return render_template('edit_user.html', user=user)
        
        if User.query.filter(User.email == email, User.id != user.id).first():
            flash('Bu e-posta adresi ba≈üka bir kullanƒ±cƒ± tarafƒ±ndan kullanƒ±lƒ±yor!')
            # ƒ∞statistikleri hesapla
            user.task_stats = {
                'assigned': user.assigned_tasks.count(),
                'created': user.created_tasks.count(),
                'completed': user.assigned_tasks.filter_by(status='completed').count(),
                'pending': user.assigned_tasks.filter_by(status='pending').count(),
                'in_progress': user.assigned_tasks.filter_by(status='in_progress').count(),
                'reminders': len(user.reminders),
                'comments': len(user.comments)
            }
            return render_template('edit_user.html', user=user)
        
        # Kullanƒ±cƒ± bilgilerini g√ºncelle
        user.username = username
        user.email = email
        user.role = role
        user.department = department
        
        # ≈ûifre deƒüi≈ütirilecek mi?
        if new_password:
            if len(new_password) < 6:
                flash('Yeni ≈üifre en az 6 karakter olmalƒ±dƒ±r!')
                # ƒ∞statistikleri hesapla
                user.task_stats = {
                    'assigned': user.assigned_tasks.count(),
                    'created': user.created_tasks.count(),
                    'completed': user.assigned_tasks.filter_by(status='completed').count(),
                    'pending': user.assigned_tasks.filter_by(status='pending').count(),
                    'in_progress': user.assigned_tasks.filter_by(status='in_progress').count(),
                    'reminders': len(user.reminders),
                    'comments': len(user.comments)
                }
                return render_template('edit_user.html', user=user)
            user.password_hash = generate_password_hash(new_password)
        
        try:
            db.session.commit()
            flash(f'Kullanƒ±cƒ± "{user.username}" ba≈üarƒ±yla g√ºncellendi!')
            return redirect(url_for('users'))
        except Exception as e:
            db.session.rollback()
            flash(f'Kullanƒ±cƒ± g√ºncellenirken hata olu≈ütu: {str(e)}')
    
    # ƒ∞statistikleri hesapla
    user.task_stats = {
        'assigned': user.assigned_tasks.count(),
        'created': user.created_tasks.count(),
        'completed': user.assigned_tasks.filter_by(status='completed').count(),
        'pending': user.assigned_tasks.filter_by(status='pending').count(),
        'in_progress': user.assigned_tasks.filter_by(status='in_progress').count(),
        'reminders': len(user.reminders),
        'comments': len(user.comments)
    }
    
    return render_template('edit_user.html', user=user)

# ƒ∞statistikler
@app.route('/stats')
@login_required
def stats():
    if current_user.role == 'employee':
        flash('ƒ∞statistikleri g√∂rme yetkiniz yok!')
        return redirect(url_for('index'))
    
    # Temel istatistikler
    total_tasks = Task.query.count()
    completed_tasks = Task.query.filter_by(status='completed').count()
    pending_tasks = Task.query.filter_by(status='pending').count()
    in_progress_tasks = Task.query.filter_by(status='in_progress').count()
    
    # Departman bazƒ±nda istatistikler (admin i√ßin)
    dept_stats = []
    if current_user.role == 'admin':
        departments = db.session.query(User.department).distinct().all()
        for dept in departments:
            if dept[0]:  # None olmayan departmanlar
                dept_users = User.query.filter_by(department=dept[0]).all()
                user_ids = [user.id for user in dept_users]
                # Many-to-Many ili≈üki ile departman g√∂revlerini say
                dept_total = Task.query.join(task_assignments).join(User).filter(User.id.in_(user_ids)).count()
                dept_completed = Task.query.join(task_assignments).join(User).filter(User.id.in_(user_ids), Task.status=='completed').count()
                dept_stats.append({
                    'department': dept[0],
                    'total': dept_total,
                    'completed': dept_completed,
                    'completion_rate': round((dept_completed/dept_total*100) if dept_total > 0 else 0, 1)
                })
    
    stats_data = {
        'total_tasks': total_tasks,
        'completed_tasks': completed_tasks,
        'pending_tasks': pending_tasks,
        'in_progress_tasks': in_progress_tasks,
        'completion_rate': round((completed_tasks/total_tasks*100) if total_tasks > 0 else 0, 1),
        'dept_stats': dept_stats
    }
    
    return render_template('stats.html', stats=stats_data)

# Anƒ±msatƒ±cƒ±lar
@app.route('/reminders')
@login_required
def reminders():
    reminders = Reminder.query.filter_by(user_id=current_user.id).order_by(Reminder.reminder_date.asc()).all()
    return render_template('reminders.html', reminders=reminders)

# Yeni anƒ±msatƒ±cƒ± ekleme
@app.route('/add_reminder', methods=['GET', 'POST'])
@login_required
def add_reminder():
    if request.method == 'POST':
        title = request.form['title']
        description = request.form['description']
        reminder_date_str = request.form['reminder_date']
        reminder_time_str = request.form.get('reminder_time', '09:00')
        
        # Tarih ve saati birle≈ütir
        reminder_datetime = datetime.strptime(f"{reminder_date_str} {reminder_time_str}", '%Y-%m-%d %H:%M')
        
        reminder = Reminder(
            title=title,
            description=description,
            reminder_date=reminder_datetime,
            user_id=current_user.id
        )
        
        db.session.add(reminder)
        db.session.commit()
        flash('Anƒ±msatƒ±cƒ± ba≈üarƒ±yla eklendi!')
        return redirect(url_for('reminders'))
    
    return render_template('add_reminder.html')

# Anƒ±msatƒ±cƒ± tamamlama
@app.route('/complete_reminder/<int:reminder_id>', methods=['POST'])
@login_required
def complete_reminder(reminder_id):
    reminder = Reminder.query.get_or_404(reminder_id)
    
    # Sadece kendi anƒ±msatƒ±cƒ±sƒ±nƒ± tamamlayabilir
    if reminder.user_id != current_user.id:
        flash('Bu anƒ±msatƒ±cƒ±yƒ± tamamlama yetkiniz yok!')
        return redirect(url_for('reminders'))
    
    reminder.is_completed = not reminder.is_completed
    db.session.commit()
    
    status = 'tamamlandƒ±' if reminder.is_completed else 'tamamlanmadƒ±'
    flash(f'Anƒ±msatƒ±cƒ± {status} olarak i≈üaretlendi!')
    return redirect(url_for('reminders'))

# Anƒ±msatƒ±cƒ± silme
@app.route('/delete_reminder/<int:reminder_id>', methods=['POST'])
@login_required
def delete_reminder(reminder_id):
    reminder = Reminder.query.get_or_404(reminder_id)
    
    # Sadece kendi anƒ±msatƒ±cƒ±sƒ±nƒ± silebilir
    if reminder.user_id != current_user.id:
        flash('Bu anƒ±msatƒ±cƒ±yƒ± silme yetkiniz yok!')
        return redirect(url_for('reminders'))
    
    db.session.delete(reminder)
    db.session.commit()
    flash('Anƒ±msatƒ±cƒ± silindi!')
    return redirect(url_for('reminders'))

# Bug√ºn√ºn anƒ±msatƒ±cƒ±larƒ±nƒ± API olarak getir
@app.route('/api/today_reminders')
@login_required
def api_today_reminders():
    today = datetime.now().date()
    tomorrow = today + timedelta(days=1)
    
    reminders = Reminder.query.filter(
        Reminder.user_id == current_user.id,
        Reminder.reminder_date >= today,
        Reminder.reminder_date < tomorrow,
        Reminder.is_completed == False
    ).all()
    
    reminder_list = []
    for reminder in reminders:
        reminder_list.append({
            'id': reminder.id,
            'title': reminder.title,
            'description': reminder.description,
            'time': format_time_only(reminder.reminder_date)
        })
    
    return jsonify(reminder_list)

@app.route('/api/current-time')
def api_current_time():
    """Mevcut saati JSON olarak d√∂nd√ºr√ºr"""
    config = load_timezone_config()
    current_tz = pytz.timezone(config['timezone'])
    current_time = datetime.now(current_tz)
    
    return jsonify({
        'time': current_time.strftime(config['display_format']),
        'timezone': config['timezone'],
        'timestamp': current_time.isoformat()
    })

@app.route('/api/timezone-preview')
def api_timezone_preview():
    """Se√ßilen timezone'ƒ±n √∂nizlemesini d√∂nd√ºr√ºr"""
    timezone_str = request.args.get('tz', 'Europe/Istanbul')
    
    try:
        if validate_timezone(timezone_str):
            tz = pytz.timezone(timezone_str)
            current_time = datetime.now(tz)
            
            # Varsayƒ±lan format kullan
            config = load_timezone_config()
            time_str = current_time.strftime(config['display_format'])
            
            return jsonify({
                'time': time_str,
                'timezone': timezone_str,
                'timestamp': current_time.isoformat()
            })
        else:
            return jsonify({'error': 'Invalid timezone'}), 400
    except Exception as e:
        return jsonify({'error': str(e)}), 500

def create_admin_user():
    """ƒ∞lk admin kullanƒ±cƒ±yƒ± olu≈ütur"""
    admin = User.query.filter_by(username='admin').first()
    if not admin:
        admin = User(
            username='admin',
            email='admin@company.com',
            password_hash=generate_password_hash('admin123'),
            role='admin',
            department='IT'
        )
        db.session.add(admin)
        db.session.commit()
        print("Admin kullanƒ±cƒ± olu≈üturuldu: admin / admin123")

# Mail g√∂nderme fonksiyonu
def send_urgent_task_email(task, assignees):
    """Acil g√∂rev olu≈üturulduƒüunda mail g√∂nderir"""
    try:
        # Development ortamƒ±nda mail konfig√ºrasyonu yoksa sim√ºle et
        if not app.config.get('MAIL_USERNAME'):
            print(f"üö® ACƒ∞L G√ñREV MAƒ∞Lƒ∞ (Sƒ∞M√úLE EDƒ∞LDƒ∞):")
            print(f"G√∂rev: {task.title}")
            print(f"Alƒ±cƒ±lar: {[assignee.email or assignee.username for assignee in assignees]}")
            return True
        
        # Debug: Mail konfig√ºrasyonunu kontrol et
        print(f"üîß Mail Server: {app.config.get('MAIL_SERVER')}")
        print(f"üîß Mail Username: {app.config.get('MAIL_USERNAME')}")
        
        mail_sent_count = 0    
        # Her atanan kullanƒ±cƒ±ya ayrƒ± mail g√∂nder
        for assignee in assignees:
            if assignee.email:  # Email adresi varsa
                print(f"üìß Mail g√∂nderiliyor: {assignee.email}")
                msg = Message(
                    subject=f'üö® ACƒ∞L G√ñREV: {task.title}',
                    recipients=[assignee.email],
                    html=f'''
                    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
                        <div style="background-color: #dc3545; color: white; padding: 20px; text-align: center;">
                            <h1>üö® ACƒ∞L G√ñREV ATANDI</h1>
                        </div>
                        <div style="padding: 20px; background-color: #f8f9fa;">
                            <h2>{task.title}</h2>
                            <p><strong>A√ßƒ±klama:</strong></p>
                            <div style="background-color: white; padding: 15px; border-left: 4px solid #dc3545; margin: 10px 0;">
                                {task.description.replace(chr(10), '<br>') if task.description else 'A√ßƒ±klama yok'}
                            </div>
                            <p><strong>√ñncelik:</strong> <span style="color: #dc3545; font-weight: bold;">ACƒ∞L</span></p>
                            <p><strong>Atayan:</strong> {task.creator.username}</p>
                            {f'<p><strong>Son Tarih:</strong> {format_date_only(task.due_date)}</p>' if task.due_date else ''}
                            <p><strong>Olu≈üturulma Tarihi:</strong> {format_date_time(task.created_at)}</p>
                        </div>
                        <div style="background-color: #e9ecef; padding: 15px; text-align: center;">
                            <p style="margin: 0; color: #6c757d;">Bu g√∂rev acil olarak i≈üaretlenmi≈ütir. L√ºtfen en kƒ±sa s√ºrede inceleyiniz.</p>
                            <p style="margin: 5px 0 0 0; color: #6c757d; font-size: 12px;">Helmex Todo Y√∂netim Sistemi</p>
                        </div>
                    </div>
                    '''
                )
                try:
                    mail.send(msg)
                    mail_sent_count += 1
                    print(f"‚úÖ Mail g√∂nderildi: {assignee.email}")
                except Exception as mail_error:
                    print(f"‚ùå Mail g√∂nderme hatasƒ± ({assignee.email}): {mail_error}")
            else:
                print(f"‚ùå Email adresi yok: {assignee.username}")
        
        print(f"üìä Toplam {mail_sent_count} mail g√∂nderildi")
        return True
    except Exception as e:
        print(f"‚ùå Genel mail g√∂nderme hatasƒ±: {e}")
        import traceback
        traceback.print_exc()
        return False
        return False

# Yedekleme sistemi routes
@app.route('/admin/backups')
@login_required
def backup_management():
    if current_user.role != 'admin':
        flash('Bu sayfaya eri≈üim yetkiniz yok!')
        return redirect(url_for('index'))
    
    try:
        from backup_system import TodoBackupManager
        backup_manager = TodoBackupManager()
        stats = backup_manager.get_backup_stats()
        
        # Yedek dosya listesi
        backup_files = []
        backup_dir = 'backups'
        if os.path.exists(backup_dir):
            for file in os.listdir(backup_dir):
                if file.startswith('todo_backup_') and file.endswith('.zip'):
                    file_path = os.path.join(backup_dir, file)
                    file_size = os.path.getsize(file_path) / (1024 * 1024)  # MB
                    file_time = datetime.fromtimestamp(os.path.getmtime(file_path))
                    backup_files.append({
                        'name': file,
                        'size': file_size,
                        'date': file_time
                    })
        
        # Tarihe g√∂re sƒ±rala (en yeni √∂nce)
        backup_files.sort(key=lambda x: x['date'], reverse=True)
        
        return render_template('backup_management.html', stats=stats, backup_files=backup_files)
        
    except Exception as e:
        flash(f'Yedekleme bilgileri alƒ±namadƒ±: {e}')
        return redirect(url_for('index'))

@app.route('/admin/backup/create', methods=['POST'])
@login_required
def create_backup():
    if current_user.role != 'admin':
        flash('Bu i≈ülemi yapma yetkiniz yok!')
        return redirect(url_for('index'))
    
    try:
        from backup_system import TodoBackupManager
        backup_manager = TodoBackupManager()
        
        if backup_manager.create_backup():
            flash('‚úÖ Yedekleme ba≈üarƒ±yla tamamlandƒ±!')
        else:
            flash('‚ùå Yedekleme sƒ±rasƒ±nda hata olu≈ütu!')
            
    except Exception as e:
        flash(f'Yedekleme hatasƒ±: {e}')
    
    return redirect(url_for('backup_management'))

@app.route('/admin/backup/download/<filename>')
@login_required
def download_backup(filename):
    if current_user.role != 'admin':
        flash('Bu i≈ülemi yapma yetkiniz yok!')
        return redirect(url_for('index'))
    
    backup_dir = 'backups'
    return send_from_directory(backup_dir, filename, as_attachment=True)

@app.route('/admin/mail-settings', methods=['GET', 'POST'])
@login_required
def mail_settings():
    """Mail ayarlarƒ± sayfasƒ±"""
    if current_user.role != 'admin':
        flash('Bu sayfaya eri≈üim yetkiniz yok!')
        return redirect(url_for('index'))
    
    if request.method == 'POST':
        # Form verilerini al
        mail_server = request.form.get('mail_server', '').strip()
        mail_port = request.form.get('mail_port', '').strip()
        mail_use_tls = request.form.get('mail_use_tls') == 'on'
        mail_username = request.form.get('mail_username', '').strip()
        mail_password = request.form.get('mail_password', '').strip()
        # Eƒüer ≈üifre alanƒ± bo≈ü veya sadece yƒ±ldƒ±z karakterleri ise mevcut ≈üifreyi koru
        if not mail_password or mail_password.startswith('‚Ä¢‚Ä¢‚Ä¢‚Ä¢'):
            mail_password = app.config.get('MAIL_PASSWORD', '')
            print(f"üîß Mevcut ≈üifre korunuyor")
        mail_default_sender = request.form.get('mail_default_sender', '').strip()
        
        # Debug: Form verilerini log'la
        print(f"üîß Form verileri alƒ±ndƒ±:")
        print(f"   Server: {mail_server}")
        print(f"   Port: {mail_port}")
        print(f"   TLS: {mail_use_tls}")
        print(f"   Username: {mail_username}")
        print(f"   Password: {'SET' if mail_password else 'EMPTY'}")
        print(f"   Sender: {mail_default_sender}")
        
        # Validasyon
        error_messages = []
        if not mail_server:
            error_messages.append('Mail server adresi gerekli')
        if not mail_port or not mail_port.isdigit():
            error_messages.append('Ge√ßerli bir port numarasƒ± gerekli')
        if not mail_username:
            error_messages.append('Kullanƒ±cƒ± adƒ± gerekli')
        if not mail_default_sender:
            error_messages.append('G√∂nderen adresi gerekli')
        
        if error_messages:
            for error_msg in error_messages:
                flash(error_msg, 'danger')
            return render_template('mail_settings.html', config=app.config)
        
        try:
            # Flask app config'i g√ºncelle
            app.config['MAIL_SERVER'] = mail_server
            app.config['MAIL_PORT'] = int(mail_port)
            app.config['MAIL_USE_TLS'] = mail_use_tls
            app.config['MAIL_USERNAME'] = mail_username
            app.config['MAIL_PASSWORD'] = mail_password
            app.config['MAIL_DEFAULT_SENDER'] = mail_default_sender
            
            # Mail ayarlarƒ±nƒ± dosyaya kaydet
            config_to_save = {
                'MAIL_SERVER': mail_server,
                'MAIL_PORT': int(mail_port),
                'MAIL_USE_TLS': mail_use_tls,
                'MAIL_USERNAME': mail_username,
                'MAIL_PASSWORD': mail_password,
                'MAIL_DEFAULT_SENDER': mail_default_sender
            }
            save_mail_config(config_to_save)
            
            # Mail extension'ƒ± yeniden ba≈ülat
            global mail
            mail.init_app(app)
            
            flash('‚úÖ Mail ayarlarƒ± ba≈üarƒ±yla g√ºncellendi!', 'success')
            print(f"üîß Mail ayarlarƒ± g√ºncellendi - Server: {mail_server}, Username: {mail_username[:4]}***")
            
        except Exception as e:
            flash(f'‚ùå Mail ayarlarƒ± g√ºncellenirken hata olu≈ütu: {str(e)}', 'danger')
            print(f"‚ùå Mail ayarlarƒ± g√ºncelleme hatasƒ±: {e}")
    
    return render_template('mail_settings.html', config=app.config)

@app.route('/admin/timezone-settings', methods=['GET', 'POST'])
@login_required
def timezone_settings():
    """Timezone ayarlarƒ± sayfasƒ±"""
    if current_user.role != 'admin':
        flash('Bu sayfaya eri≈üim yetkiniz yok!')
        return redirect(url_for('index'))
    
    if request.method == 'POST':
        try:
            timezone = request.form.get('timezone')
            display_format = request.form.get('display_format', '%d.%m.%Y %H:%M')
            date_format = request.form.get('date_format', '%d.%m.%Y')
            time_format = request.form.get('time_format', '%H:%M')
            
            # Timezone validation
            if not validate_timezone(timezone):
                flash('‚ùå Ge√ßersiz timezone se√ßimi!', 'danger')
                return redirect(url_for('timezone_settings'))
            
            # Yeni ayarlarƒ± kaydet
            new_config = {
                'timezone': timezone,
                'display_format': display_format,
                'date_format': date_format,
                'time_format': time_format
            }
            
            if save_timezone_config(new_config):
                flash('‚úÖ Timezone ayarlarƒ± ba≈üarƒ±yla g√ºncellendi!', 'success')
                print(f"üïê Timezone g√ºncellendi: {timezone}")
            else:
                flash('‚ùå Timezone ayarlarƒ± kaydedilemedi!', 'danger')
                
        except Exception as e:
            flash(f'‚ùå Timezone ayarlarƒ± g√ºncellenirken hata olu≈ütu: {str(e)}', 'danger')
            print(f"‚ùå Timezone ayarlarƒ± g√ºncelleme hatasƒ±: {e}")
    
    # Mevcut ayarlarƒ± y√ºkle
    current_config = load_timezone_config()
    popular_timezones = get_popular_timezones()
    all_timezones = get_all_timezones()
    
    return render_template('timezone_settings.html', 
                         config=current_config,
                         popular_timezones=popular_timezones,
                         all_timezones=all_timezones)

@app.route('/debug/mail')
@login_required
def debug_mail():
    """Mail konfig√ºrasyonunu debug etmek i√ßin"""
    if current_user.role != 'admin':
        return jsonify({'error': 'Bu sayfaya eri≈üim yetkiniz yok.'}), 403
    
    debug_info = {
        'MAIL_SERVER': app.config.get('MAIL_SERVER'),
        'MAIL_PORT': app.config.get('MAIL_PORT'),
        'MAIL_USE_TLS': app.config.get('MAIL_USE_TLS'),
        'MAIL_USERNAME': app.config.get('MAIL_USERNAME'),
        'MAIL_PASSWORD': '***' if app.config.get('MAIL_PASSWORD') else None,
        'MAIL_DEFAULT_SENDER': app.config.get('MAIL_DEFAULT_SENDER'),
        'Flask Mail Extension': 'Loaded' if 'mail' in globals() else 'Not Loaded'
    }
    
    return jsonify(debug_info)

@app.route('/debug/test-mail')
@login_required
def test_mail():
    """Test mail g√∂nderim"""
    if current_user.role != 'admin':
        return jsonify({'error': 'Bu sayfaya eri≈üim yetkiniz yok.'}), 403
    
    try:
        if not app.config.get('MAIL_USERNAME'):
            return jsonify({'status': 'error', 'message': 'Mail konfig√ºrasyonu eksik'})
        
        if not current_user.email:
            return jsonify({'status': 'error', 'message': 'Kullanƒ±cƒ±nƒ±zƒ±n email adresi yok'})
        
        msg = Message(
            subject='üß™ Test Mail - Helmex Todo',
            recipients=[current_user.email],
            html='''
            <h2>Test Mail</h2>
            <p>Bu bir test mailidir. Mail sistemi √ßalƒ±≈üƒ±yor! ‚úÖ</p>
            <p>G√∂nderim zamanƒ±: ''' + format_date_time(datetime.now()) + '''</p>
            '''
        )
        mail.send(msg)
        return jsonify({'status': 'success', 'message': f'Test mail g√∂nderildi: {current_user.email}'})
    except Exception as e:
        return jsonify({'status': 'error', 'message': f'Mail g√∂nderme hatasƒ±: {str(e)}'})

# G√∂rev silme (admin ve g√∂rev sahibi manager)
@app.route('/delete_task/<int:task_id>', methods=['POST'])
@login_required
def delete_task(task_id):
    task = Task.query.get_or_404(task_id)
    
    # Yetki kontrol√º - admin veya g√∂rev olu≈üturan ki≈üi silebilir
    if current_user.role != 'admin' and task.created_by != current_user.id:
        flash('Bu g√∂revi silme yetkiniz yok!')
        return redirect(url_for('index'))
    
    try:
        # G√∂rev ba≈ülƒ±ƒüƒ±nƒ± flash mesajƒ± i√ßin sakla
        task_title = task.title
        
        # ƒ∞li≈ükili yorumlarƒ± sil
        Comment.query.filter_by(task_id=task_id).delete()
        
        # G√∂rev atamalarƒ±nƒ± temizle (Many-to-Many ili≈üki otomatik temizlenir)
        task.assignees.clear()
        
        # G√∂revi sil
        db.session.delete(task)
        db.session.commit()
        
        flash(f'G√∂rev "{task_title}" ba≈üarƒ±yla silindi!')
        
    except Exception as e:
        db.session.rollback()
        flash(f'G√∂rev silinirken hata olu≈ütu: {str(e)}')
    
    return redirect(url_for('index'))

# G√∂rev tamamlama
@app.route('/complete_task/<int:task_id>', methods=['POST'])
@login_required
def complete_task(task_id):
    task = Task.query.get_or_404(task_id)
    
    # Yetki kontrol√º - admin, manager veya g√∂revde atanmƒ±≈ü ki≈üi tamamlayabilir
    if (current_user.role not in ['admin', 'manager'] and 
        current_user not in task.assignees):
        flash('Bu g√∂revi tamamlama yetkiniz yok!')
        return redirect(url_for('index'))
    
    try:
        # G√∂revi tamamlandƒ± olarak i≈üaretle
        task.status = 'completed'
        db.session.commit()
        
        flash(f'G√∂rev "{task.title}" tamamlandƒ± olarak i≈üaretlendi!')
        
    except Exception as e:
        db.session.rollback()
        flash(f'G√∂rev tamamlanƒ±rken hata olu≈ütu: {str(e)}')
    
    return jsonify({'success': True})

@app.route('/get_task_description/<int:task_id>', methods=['GET'])
@login_required
def get_task_description(task_id):
    """G√∂rev a√ßƒ±klamasƒ±nƒ± getir - Sadece g√∂rev olu≈üturan ki≈üi g√∂rebilir"""
    task = Task.query.get_or_404(task_id)
    
    # Yetki kontrol√º - sadece g√∂rev olu≈üturan ki≈üi g√∂rebilir
    if task.created_by != current_user.id:
        return jsonify({'success': False, 'message': 'Bu g√∂revin a√ßƒ±klamasƒ±nƒ± g√∂rme yetkiniz yok!'})
    
    return jsonify({
        'success': True,
        'description': task.description or ''
    })

@app.route('/edit_task_description/<int:task_id>', methods=['POST'])
@login_required
def edit_task_description(task_id):
    """G√∂rev a√ßƒ±klamasƒ±nƒ± d√ºzenle - Sadece g√∂rev olu≈üturan ki≈üi d√ºzenleyebilir"""
    task = Task.query.get_or_404(task_id)
    
    # Yetki kontrol√º - sadece g√∂rev olu≈üturan ki≈üi d√ºzenleyebilir
    if task.created_by != current_user.id:
        return jsonify({'success': False, 'message': 'Bu g√∂revin a√ßƒ±klamasƒ±nƒ± d√ºzenleme yetkiniz yok!'})
    
    try:
        new_description = request.json.get('description', '').strip()
        
        # A√ßƒ±klamayƒ± g√ºncelle
        task.description = new_description
        db.session.commit()
        
        return jsonify({
            'success': True, 
            'message': f'G√∂rev a√ßƒ±klamasƒ± g√ºncellendi!',
            'new_description': new_description
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': f'A√ßƒ±klama g√ºncellenirken hata olu≈ütu: {str(e)}'})

@app.route('/save_checkbox_state/<int:task_id>', methods=['POST'])
@login_required
def save_checkbox_state(task_id):
    """Checkbox durumlarƒ±nƒ± kaydet - Atanan ki≈üiler ve g√∂rev olu≈üturan eri≈üebilir"""
    task = Task.query.get_or_404(task_id)
    
    # Yetki kontrol√º - g√∂rev olu≈üturan veya atanan ki≈üiler eri≈üebilir
    if (task.created_by != current_user.id and 
        current_user not in task.assignees):
        return jsonify({'success': False, 'message': 'Bu g√∂revin checkbox durumlarƒ±nƒ± deƒüi≈ütirme yetkiniz yok!'})
    
    try:
        # Frontend'den gelen HTML'i al
        updated_description = request.json.get('description', '').strip()
        
        # A√ßƒ±klamayƒ± g√ºncelle (checkbox durumlarƒ± ile birlikte)
        task.description = updated_description
        db.session.commit()
        
        return jsonify({
            'success': True, 
            'message': 'Checkbox durumlarƒ± kaydedildi!',
            'updated_by': current_user.username
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': f'Checkbox durumlarƒ± kaydedilemedi: {str(e)}'})

# =============================================================================
# RAPOR Sƒ∞STEMƒ∞
# =============================================================================

# Raporlar ana sayfasƒ±
@app.route('/reports')
@login_required
def reports():
    """Rapor listesi sayfasƒ±"""
    # Kullanƒ±cƒ±nƒ±n kendi raporlarƒ±
    my_reports = Report.query.filter_by(author_id=current_user.id).order_by(Report.report_date.desc()).all()
    
    # Kullanƒ±cƒ±ya payla≈üƒ±lan raporlar
    shared_reports = Report.query.join(report_shares).filter(report_shares.c.user_id == current_user.id).order_by(Report.report_date.desc()).all()
    
    # Admin ve manager'lar t√ºm raporlarƒ± g√∂rebilir
    if current_user.role in ['admin', 'manager']:
        if current_user.role == 'admin':
            all_reports = Report.query.filter_by(is_private=False).order_by(Report.report_date.desc()).all()
        else:
            # Manager kendi departmanƒ±ndaki raporlarƒ± g√∂rebilir
            dept_users = User.query.filter_by(department=current_user.department).all()
            user_ids = [user.id for user in dept_users]
            all_reports = Report.query.filter(Report.author_id.in_(user_ids), Report.is_private==False).order_by(Report.report_date.desc()).all()
    else:
        all_reports = []
    
    return render_template('reports.html', 
                         my_reports=my_reports, 
                         shared_reports=shared_reports,
                         all_reports=all_reports)

# Yeni rapor olu≈üturma
@app.route('/reports/create', methods=['GET', 'POST'])
@login_required
def create_report():
    """Yeni rapor olu≈üturma"""
    if request.method == 'POST':
        title = request.form.get('title')
        content = request.form.get('content')
        report_date = request.form.get('report_date')
        is_private = request.form.get('is_private') == 'on'
        shared_users = request.form.getlist('shared_users')  # Payla≈üƒ±lacak kullanƒ±cƒ±lar
        
        if not title or not content or not report_date:
            flash('T√ºm alanlar zorunludur!', 'error')
            return redirect(url_for('create_report'))
        
        try:
            # Tarih d√∂n√º≈ü√ºm√º
            report_date_obj = datetime.strptime(report_date, '%Y-%m-%d').date()
            
            # Yeni rapor olu≈ütur
            report = Report(
                title=title,
                content=content,
                report_date=report_date_obj,
                is_private=is_private,
                author_id=current_user.id
            )
            
            db.session.add(report)
            db.session.flush()  # ID'yi almak i√ßin flush
            
            # Payla≈üƒ±m i≈ülemi
            if shared_users:
                for user_id in shared_users:
                    if user_id and user_id != str(current_user.id):  # Kendisi ile payla≈ümasƒ±n
                        try:
                            user_id_int = int(user_id)
                            # Kullanƒ±cƒ±nƒ±n var olup olmadƒ±ƒüƒ±nƒ± kontrol et
                            if User.query.get(user_id_int):
                                db.session.execute(
                                    report_shares.insert().values(
                                        report_id=report.id,
                                        user_id=user_id_int
                                    )
                                )
                        except (ValueError, TypeError):
                            continue
            
            db.session.commit()
            
            flash('Rapor ba≈üarƒ±yla olu≈üturuldu!', 'success')
            return redirect(url_for('reports'))
            
        except ValueError:
            flash('Ge√ßersiz tarih formatƒ±!', 'error')
            return redirect(url_for('create_report'))
        except Exception as e:
            flash(f'Hata: {str(e)}', 'error')
            return redirect(url_for('create_report'))
    
    # GET request - mevcut kullanƒ±cƒ±larƒ± getir
    users = User.query.filter(User.id != current_user.id).order_by(User.username).all()
    return render_template('create_report.html', users=users)

# Rapor detay sayfasƒ±
@app.route('/reports/<int:report_id>')
@login_required
def report_detail(report_id):
    """Rapor detay sayfasƒ±"""
    report = Report.query.get_or_404(report_id)
    
    # Yetki kontrol√º
    can_view = (report.author_id == current_user.id or 
               current_user in report.shared_with or 
               (current_user.role == 'admin') or
               (current_user.role == 'manager' and report.author.department == current_user.department and not report.is_private))
    
    if not can_view:
        flash('Bu raporu g√∂r√ºnt√ºleme yetkiniz yok!', 'error')
        return redirect(url_for('reports'))
    
    # Raporu okundu olarak i≈üaretle
    report.mark_as_read(current_user)
    
    # Yorumlarƒ± getir
    comments = ReportComment.query.filter_by(report_id=report_id).order_by(ReportComment.created_at.desc()).all()
    
    # Payla≈üƒ±labilen kullanƒ±cƒ±larƒ± getir (aynƒ± departmandaki kullanƒ±cƒ±lar)
    if current_user.department:
        shareable_users = User.query.filter(
            User.department == current_user.department,
            User.id != current_user.id
        ).all()
    else:
        shareable_users = []
    
    return render_template('report_detail.html', 
                         report=report, 
                         comments=comments,
                         shareable_users=shareable_users)

# Rapor payla≈üma
@app.route('/reports/<int:report_id>/share', methods=['POST'])
@login_required
def share_report(report_id):
    """Raporu belirli kullanƒ±cƒ±larla payla≈ü"""
    report = Report.query.get_or_404(report_id)
    
    # Yetki kontrol√º - sadece rapor sahibi payla≈üabilir
    if report.author_id != current_user.id:
        flash('Bu raporu payla≈üma yetkiniz yok!', 'error')
        return redirect(url_for('report_detail', report_id=report_id))
    
    user_ids = request.form.getlist('user_ids')
    
    if not user_ids:
        flash('L√ºtfen en az bir kullanƒ±cƒ± se√ßin!', 'error')
        return redirect(url_for('report_detail', report_id=report_id))
    
    try:
        # Mevcut payla≈üƒ±mlarƒ± temizle
        report.shared_with.clear()
        
        # Yeni payla≈üƒ±mlarƒ± ekle
        for user_id in user_ids:
            user = User.query.get(user_id)
            if user and user.department == current_user.department:
                report.shared_with.append(user)
        
        db.session.commit()
        flash('Rapor ba≈üarƒ±yla payla≈üƒ±ldƒ±!', 'success')
        
    except Exception as e:
        flash(f'Hata: {str(e)}', 'error')
    
    return redirect(url_for('report_detail', report_id=report_id))

# Rapor yorumu ekleme
@app.route('/reports/<int:report_id>/comment', methods=['POST'])
@login_required
def add_report_comment(report_id):
    """Rapor yorumu ekleme"""
    report = Report.query.get_or_404(report_id)
    
    # Yetki kontrol√º
    can_comment = (report.author_id == current_user.id or 
                  current_user in report.shared_with or 
                  (current_user.role == 'admin') or
                  (current_user.role == 'manager' and report.author.department == current_user.department and not report.is_private))
    
    if not can_comment:
        flash('Bu raporu yorumlama yetkiniz yok!', 'error')
        return redirect(url_for('reports'))
    
    content = request.form.get('content')
    
    if not content:
        flash('Yorum i√ßeriƒüi bo≈ü olamaz!', 'error')
        return redirect(url_for('report_detail', report_id=report_id))
    
    try:
        comment = ReportComment(
            content=content,
            report_id=report_id,
            user_id=current_user.id
        )
        
        db.session.add(comment)
        db.session.commit()
        
        flash('Yorum ba≈üarƒ±yla eklendi!', 'success')
        
    except Exception as e:
        flash(f'Hata: {str(e)}', 'error')
    
    return redirect(url_for('report_detail', report_id=report_id))

# Rapor d√ºzenleme
@app.route('/reports/<int:report_id>/edit', methods=['GET', 'POST'])
@login_required
def edit_report(report_id):
    """Rapor d√ºzenleme"""
    report = Report.query.get_or_404(report_id)
    
    # Yetki kontrol√º - sadece rapor sahibi d√ºzenleyebilir
    if report.author_id != current_user.id:
        flash('Bu raporu d√ºzenleme yetkiniz yok!', 'error')
        return redirect(url_for('report_detail', report_id=report_id))
    
    if request.method == 'POST':
        title = request.form.get('title')
        content = request.form.get('content')
        report_date = request.form.get('report_date')
        is_private = request.form.get('is_private') == 'on'
        shared_users = request.form.getlist('shared_users')  # Payla≈üƒ±lacak kullanƒ±cƒ±lar
        
        if not title or not content or not report_date:
            flash('T√ºm alanlar zorunludur!', 'error')
            return redirect(url_for('edit_report', report_id=report_id))
        
        try:
            # Tarih d√∂n√º≈ü√ºm√º
            report_date_obj = datetime.strptime(report_date, '%Y-%m-%d').date()
            
            # Raporu g√ºncelle
            report.title = title
            report.content = content
            report.report_date = report_date_obj
            report.is_private = is_private
            report.updated_at = datetime.utcnow()
            
            # Mevcut payla≈üƒ±mlarƒ± sil
            db.session.execute(
                report_shares.delete().where(report_shares.c.report_id == report_id)
            )
            
            # Yeni payla≈üƒ±mlarƒ± ekle
            if shared_users:
                for user_id in shared_users:
                    if user_id and user_id != str(current_user.id):  # Kendisi ile payla≈ümasƒ±n
                        try:
                            user_id_int = int(user_id)
                            # Kullanƒ±cƒ±nƒ±n var olup olmadƒ±ƒüƒ±nƒ± kontrol et
                            if User.query.get(user_id_int):
                                db.session.execute(
                                    report_shares.insert().values(
                                        report_id=report_id,
                                        user_id=user_id_int
                                    )
                                )
                        except (ValueError, TypeError):
                            continue
            
            db.session.commit()
            
            flash('Rapor ba≈üarƒ±yla g√ºncellendi!', 'success')
            return redirect(url_for('report_detail', report_id=report_id))
            
        except ValueError:
            flash('Ge√ßersiz tarih formatƒ±!', 'error')
            return redirect(url_for('edit_report', report_id=report_id))
        except Exception as e:
            flash(f'Hata: {str(e)}', 'error')
            return redirect(url_for('edit_report', report_id=report_id))
    
    # GET request - mevcut kullanƒ±cƒ±larƒ± ve payla≈üƒ±mlarƒ± getir
    users = User.query.filter(User.id != current_user.id).order_by(User.username).all()
    shared_user_ids = [user.id for user in report.shared_with]
    
    return render_template('edit_report.html', report=report, users=users, shared_user_ids=shared_user_ids)

# Rapor silme
@app.route('/reports/<int:report_id>/delete', methods=['POST'])
@login_required
def delete_report(report_id):
    """Rapor silme"""
    report = Report.query.get_or_404(report_id)
    
    # Yetki kontrol√º - sadece rapor sahibi veya admin silebilir
    if report.author_id != current_user.id and current_user.role != 'admin':
        flash('Bu raporu silme yetkiniz yok!', 'error')
        return redirect(url_for('report_detail', report_id=report_id))
    
    try:
        # ƒ∞li≈ükili kayƒ±tlarƒ± temizle: yorumlar, payla≈üƒ±mlar, okuma kayƒ±tlarƒ±
        db.session.query(ReportComment).filter_by(report_id=report_id).delete()
        db.session.execute(report_shares.delete().where(report_shares.c.report_id == report_id))
        db.session.execute(report_reads.delete().where(report_reads.c.report_id == report_id))

        # Raporu sil
        db.session.delete(report)
        db.session.commit()
        
        flash('Rapor ba≈üarƒ±yla silindi!', 'success')
        
    except Exception as e:
        flash(f'Hata: {str(e)}', 'error')
    
    return redirect(url_for('reports'))

# =============================================================================
# Navbar bildirimleri i√ßin API endpoint'leri
@app.route('/api/tasks_notifications')
@login_required
def api_tasks_notifications():
    """G√∂revler i√ßin bildirim sayƒ±sƒ±nƒ± d√∂nd√ºr√ºr - Optimize edilmi≈ü version"""
    try:
        today = datetime.now().date()
        yesterday = datetime.now() - timedelta(days=1)
        
        # Memory optimization: User'ƒ±n assigned_tasks ile tek query'de al
        user_tasks = current_user.assigned_tasks.filter(Task.status != 'completed').all()
        
        # In-memory filtering (database query yerine)
        overdue_count = 0
        today_urgent_count = 0
        new_tasks_count = 0
        
        for task in user_tasks:
            # Gecikmi≈ü g√∂revler
            if task.due_date and task.due_date < today:
                overdue_count += 1
            
            # Bug√ºn i√ßin acil g√∂revler  
            elif task.due_date == today and task.priority == 'urgent':
                today_urgent_count += 1
                
            # Yeni atanmƒ±≈ü g√∂revler (son 24 saat)
            elif task.created_at >= yesterday and task.status == 'pending':
                new_tasks_count += 1
        
        total_notifications = overdue_count + today_urgent_count + new_tasks_count
        
        return jsonify({
            'total': total_notifications,
            'overdue': overdue_count,
            'today_urgent': today_urgent_count,
            'new_tasks': new_tasks_count
        })
        
    except Exception as e:
        print(f"‚ö†Ô∏è Notification API error: {e}")
        return jsonify({
            'total': 0,
            'overdue': 0,
            'today_urgent': 0,
            'new_tasks': 0
        })

@app.route('/api/reports_notifications')
@login_required
def api_reports_notifications():
    """Raporlar i√ßin bildirim sayƒ±sƒ±nƒ± d√∂nd√ºr√ºr"""
    # Kullanƒ±cƒ±nƒ±n payla≈üƒ±lan raporlarƒ±
    shared_reports = db.session.query(Report).join(
        report_shares, Report.id == report_shares.c.report_id
    ).filter(
        report_shares.c.user_id == current_user.id,
        Report.author_id != current_user.id
    ).count()
    
    # Yeni yorumlar (son 24 saat)
    yesterday = datetime.now() - timedelta(days=1)
    user_reports = Report.query.filter_by(author_id=current_user.id).all()
    new_comments = 0
    
    for report in user_reports:
        comment_count = ReportComment.query.filter(
            ReportComment.report_id == report.id,
            ReportComment.author_id != current_user.id,
            ReportComment.created_at >= yesterday
        ).count()
        new_comments += comment_count
    
    total_notifications = shared_reports + new_comments
    
    return jsonify({
        'count': total_notifications,
        'shared_reports': shared_reports,
        'new_comments': new_comments
    })

# =============================================================================
if __name__ == '__main__':
    import os
    import time
    import sys
    
    # Memory usage monitoring  
    def print_memory_usage():
        """Memory kullanƒ±mƒ±nƒ± yazdƒ±r"""
        try:
            import psutil
            process = psutil.Process()
            memory_mb = process.memory_info().rss / 1024 / 1024
            print(f"üß† Memory usage: {memory_mb:.1f} MB")
        except ImportError:
            print("üìä psutil not available for memory monitoring")
    
    print_memory_usage()
    
    # Database baƒülantƒ±sƒ±nƒ± retry ile dene
    max_retries = 5
    retry_delay = 2
    
    for attempt in range(max_retries):
        try:
            with app.app_context():
                # Database baƒülantƒ±sƒ±nƒ± test et
                from sqlalchemy import text
                result = db.session.execute(text('SELECT 1'))
                print(f"‚úÖ Database baƒülantƒ±sƒ± ba≈üarƒ±lƒ± (attempt {attempt + 1})")
                
                # Tablolarƒ± olu≈ütur
                db.create_all()
                print("‚úÖ Tablolar olu≈üturuldu/g√ºncellendi")
                
                # Admin kullanƒ±cƒ± olu≈ütur
                create_admin_user()
                print("‚úÖ Admin kullanƒ±cƒ± kontrol√º tamamlandƒ±")
                
                break  # Ba≈üarƒ±lƒ±, d√∂ng√ºden √ßƒ±k
                
        except Exception as e:
            print(f"‚ùå Database baƒülantƒ± hatasƒ± (attempt {attempt + 1}/{max_retries}): {e}")
            
            if attempt < max_retries - 1:
                print(f"‚è≥ {retry_delay} saniye bekleyip tekrar denenecek...")
                time.sleep(retry_delay)
                retry_delay *= 2  # Exponential backoff
            else:
                print("üí• Maximum retry sayƒ±sƒ±na ula≈üƒ±ldƒ±. SQLite fallback kullanƒ±lacak.")
                # SQLite fallback
                app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///todo_company.db'
                with app.app_context():
                    db.create_all()
                    create_admin_user()
                break
    
    # Production i√ßin port'u environment variable'dan al
    port = int(os.environ.get('PORT', 5004))
    debug = os.environ.get('FLASK_ENV') != 'production'
    
    print(f"üöÄ Flask app ba≈ülatƒ±lƒ±yor - Port: {port}, Debug: {debug}")
    print_memory_usage()  # Memory kullanƒ±mƒ±nƒ± ba≈ülangƒ±√ßta da g√∂ster
    app.run(debug=debug, host='0.0.0.0', port=port)
